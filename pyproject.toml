# Project metadata and package information
[project]
name = "qCradle"
version = "0.0.0"
description = "CLI to create repos"
readme = "README.md"
authors = [{ name = "Thomas Schmelzer", email = "thomas.schmelzer@gmail.com" }]
requires-python = ">=3.10"
dependencies = [
    "copier==9.7.1",
    "questionary==2.1.0",
    "loguru==0.7.3",
    "fire==0.7.0",
    "pyyaml==6.0.2",
    "security==1.3.1",
    "gitpython>=3.1.44",
]

# URLs related to the project
[project.urls]
repository = "https://github.com/tschm/cradle"

# Optional dependencies for development
[project.optional-dependencies]
dev = [
    "pytest-cov==6.1.1",
    "pytest==8.4.0",
    "pre-commit==4.2.0",
    "pytest-mock==3.14.1"
]

# Entry points for command-line scripts
[project.scripts]
qcradle = "cradle.cli:main"

# Ruff linter configuration
[tool.ruff]
line-length = 120
target-version = "py310"
exclude = [
    "*__init__.py"
]

# Linting rules configuration
[tool.ruff.lint]
# Available rule sets in Ruff:
# A: flake8-builtins - Check for python builtins being used as variables or parameters
# B: flake8-bugbear - Find likely bugs and design problems
# C4: flake8-comprehensions - Helps write better list/set/dict comprehensions
# D: pydocstyle - Check docstring style
# E: pycodestyle errors - PEP 8 style guide
# ERA: eradicate - Find commented out code
# F: pyflakes - Detect logical errors
# I: isort - Sort imports
# N: pep8-naming - Check PEP 8 naming conventions
# PT: flake8-pytest-style - Check pytest best practices
# RUF: Ruff-specific rules
# S: flake8-bandit - Find security issues
# SIM: flake8-simplify - Simplify code
# T10: flake8-debugger - Check for debugger imports and calls
# UP: pyupgrade - Upgrade syntax for newer Python
# W: pycodestyle warnings - PEP 8 style guide warnings
# ANN: flake8-annotations - Type annotation checks
# ARG: flake8-unused-arguments - Unused arguments
# BLE: flake8-blind-except - Check for blind except statements
# COM: flake8-commas - Trailing comma enforcement
# DTZ: flake8-datetimez - Ensure timezone-aware datetime objects
# EM: flake8-errmsg - Check error message strings
# FBT: flake8-boolean-trap - Boolean argument checks
# ICN: flake8-import-conventions - Import convention enforcement
# ISC: flake8-implicit-str-concat - Implicit string concatenation
# NPY: NumPy-specific rules
# PD: pandas-specific rules
# PGH: pygrep-hooks - Grep-based checks
# PIE: flake8-pie - Miscellaneous rules
# PL: Pylint rules
# Q: flake8-quotes - Quotation style enforcement
# RSE: flake8-raise - Raise statement checks
# RET: flake8-return - Return statement checks
# SLF: flake8-self - Check for self references
# TCH: flake8-type-checking - Type checking imports
# TID: flake8-tidy-imports - Import tidying
# TRY: flake8-try-except-raise - Try/except/raise checks
# YTT: flake8-2020 - Python 2020+ compatibility

# Current configuration:
select = ["E", "F", "I", "N", "D", "UP", "NPY", "PD", "C4", "B", "S", "W"]

# Per-file rule ignores
[tool.ruff.lint.per-file-ignores]
"src/tests/**/*.py" = ["S101"]  # Allow assert statements in tests
"book/marimo/*.py" = ["N803", "S101"]

# Ruff linter rule selection
#[tool.ruff.lint]
#select = ["E", "F", "I"]

# Build system configuration
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Hatch wheel build configuration
[tool.hatch.build.targets.wheel]
packages = ["src/cradle"]

# Hatch build configuration - files to include in the package
[tool.hatch.build]
include = [
    "LICENSE",    # Ensure the LICENSE file is included in your package
    "README.md",
    "demo.png",
    "src/cradle",
]

# Deptry dependency checker configuration
[tool.deptry]
# see https://deptry.com/usage/#pep-621-dev-dependency-groups
pep621_dev_dependency_groups = ["dev"]
