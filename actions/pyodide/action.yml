name: pyodide

inputs:
  build-artifact-name:
    required: true
    type: string
  build-artifact-path:
    required: true
    type: string
  pyodide-version:
    required: false
    type: string
    default: "0.27.2"
  os:
    required: false
    type: string
    default: "ubuntu-latest"
  runner:
    required: false
    type: string
    default: "selenium"
  browser:
    required: false
    type: string
    default: "chrome"
  browser-version:
    required: false
    type: string
    default: "latest"
  playwright-version:
    required: false
    type: string
    default: "" # latest
  pytest-extra-args:
    required: false
    type: string
    default: ""
  github_token:
    description: "GitHub token for authentication"
    required: true

#concurrency:
#  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}-${{ inputs.os }}-${{ inputs.runner }}-${{ inputs.browser }}-${{ inputs.browser-version }}-${{ inputs.pyodide-version }}-${{ inputs.playwright-version }}
#  cancel-in-progress: true

runs:
  using: composite

  #test:
  #  name: test (${{ inputs.pyodide-version}},${{ inputs.browser }},${{ inputs.runner }})
  #  runs-on: ${{ inputs.os }}
  #  env:
  #    DISPLAY: :99
  #    FORCE_COLOR: 3
  steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        if: ${{ contains(inputs.browser, 'node') || inputs.runner == 'playwright' }}
        with:
          node-version: ${{ inputs.browser-version }}

      - name: Cache Playwright browsers
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        if: ${{ inputs.runner == 'playwright' }}
        with:
          path: .cache/ms-playwright
          key: ${{ runner.os }}-playwright-latest

      - name: Install playwright
        if: ${{ inputs.runner == 'playwright' }}
        shell: bash
        run: |
          if [ -n "${{ inputs.playwright-version }}" ]
          then
            python -m pip install playwright==${{inputs.playwright-version}}
          else
            python -m pip install playwright
          fi
          # TODO: install only browsers that are required
          python -m playwright install --with-deps

      - uses: pyodide/pyodide-actions/download-pyodide@012fa537869d343726d01863a34b773fc4d96a14 # v2
        with:
          version: ${{ inputs.pyodide-version }}
          to: pyodide-dist

      - uses: pyodide/pyodide-actions/install-browser@012fa537869d343726d01863a34b773fc4d96a14 # v2
        with:
          runner: ${{ inputs.runner }}
          browser: ${{ inputs.browser }}
          browser-version: ${{ inputs.browser-version }}
          playwright-version: ${{ inputs.playwright-version }}
          github-token: ${{ inputs.github_token }}

      - name: Download build artifacts from calling package
        if: ${{ inputs.build-artifact-name != 'none' }}
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ inputs.build-artifact-name }}
          path: ${{ inputs.build-artifact-path }}
          merge-multiple: true

      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: 3.12

      - name: install pyodide-py
        shell: bash
        run: |
          python -m pip install pyodide-py==${{inputs.pyodide-version}}

      - name: Install pytest-pyodide
        shell: bash
        run: |
          if [ -d "pytest_pyodide" ]; then
            # Currently we only install the package for dependencies.
            # We then uninstall it otherwise tests fails due to pytest hook being
            # registered twice.
            # temporarily pin pytest version (https://github.com/pyodide/pytest-pyodide/pull/133#issuecomment-2081412407)
              python -m pip install ".[test]" "pytest<8.0.0" "selenium<4.21.0"
          else
              python -m pip install pytest-pyodide
          fi

      #- name: Run tests
      #  shell: bash
      #  run: |
      #    python -m pytest -vra \
      #      --dist-dir=./pyodide-dist/ \
      #      --runner=${{ inputs.runner }} \
      #      --rt=${{ inputs.browser }} \
      #      ${{ inputs.pytest-extra-args }}
      - name: Test Numpy
        shell: bash
        run: |
          python -c "from pyodide import micropip; micropip.install('numpy==2.2.3')"

      - name: Test NumPy Installation in Pyodide
        shell: bash
        run: |
          python -c "
          from pyodide import micropip;
          try:
              micropip.install('numpy==2.2.3')
              print('✓ Success: numpy==2.2.3 installed successfully')
              import numpy
              print(numpy.__version__)
          except Exception as e:
              print('✗ Failed:', str(e))
              raise SystemExit(1)
          "
