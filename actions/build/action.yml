# GitHub Action to build a Python package and create a release
# This action handles the entire build process from version update to GitHub release
name: Build package
description: "Build the package and create a GitHub release with the built artifacts"

inputs:
  tag:
    description: 'The version tag to use for the package and release (e.g., v1.0.0)'
    required: true
    # No default provided as this should be explicitly set for each release
  github_token:
    description: 'GitHub token for authentication with the repository'
    required: true
    # No default provided as this should be passed from the workflow secrets

runs:
  using: "composite"  # Composite actions combine multiple steps

  steps:
    # Step 1: Check out the repository code
    # This ensures we have the latest code from the specified ref
    - name: Checkout [${{ github.repository }}]
      uses: actions/checkout@v5  # Official GitHub checkout action

    # Step 2: Set up the Python 3.12
    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'

    # Step 3: Update the version in pyproject.toml to match the tag
    # This ensures the package version matches the release tag
    - name: Update version in pyproject.toml
      shell: bash
      run: |
        echo "Updating version to ${{ inputs.tag }}"
        VERSION="${{ inputs.tag }}"
        # Use a regex to find and replace the version line (works for PEP 621 or Poetry)
        sed -i -E "s/^version = \".*\"/version = \"${VERSION}\"/" pyproject.toml

    # Step 4: Build the Python package using hatch
    # This creates distribution files in the dist/ directory
    - name: Build package
      shell: bash
      run: |
        python -m pip install hatch
        hatch build

    # Step 5: Upload the built distribution files as artifacts
    # This makes the files available for download from the GitHub Actions UI
    - name: Upload distribution artifacts
      uses: actions/upload-artifact@v4  # Official artifact upload action
      with:
        name: dist  # Name of the artifact
        path: dist/  # Path to the files to upload
        retention-days: 1  # Keep artifacts for 1 day to save space

    # Step 6: Create a GitHub release with the built artifacts
    # This creates a release on GitHub and attaches the distribution files
    - name: Create GitHub release with artifacts
      uses: softprops/action-gh-release@v2.3.3  # Third-party release action
      with:
        token: ${{ inputs.github_token }}  # Token for authentication
        tag_name: ${{ inputs.tag }}  # Use the provided tag
        generate_release_notes: true  # Automatically generate notes from commits
        files: dist/*  # Attach all files in the dist directory
